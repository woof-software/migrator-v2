/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace CometMigrator {
  export type CollateralStruct = {
    cToken: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type CollateralStructOutput = [string, BigNumber] & {
    cToken: string;
    amount: BigNumber;
  };
}

export interface CometMigratorInterface extends utils.Interface {
  functions: {
    "borrowCToken()": FunctionFragment;
    "borrowToken()": FunctionFragment;
    "cETH()": FunctionFragment;
    "comet()": FunctionFragment;
    "inMigration()": FunctionFragment;
    "isUniswapLiquidityPoolToken0()": FunctionFragment;
    "migrate((address,uint256)[],uint256)": FunctionFragment;
    "sweep(address)": FunctionFragment;
    "sweepee()": FunctionFragment;
    "uniswapLiquidityPool()": FunctionFragment;
    "uniswapV3FlashCallback(uint256,uint256,bytes)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrowCToken"
      | "borrowToken"
      | "cETH"
      | "comet"
      | "inMigration"
      | "isUniswapLiquidityPoolToken0"
      | "migrate"
      | "sweep"
      | "sweepee"
      | "uniswapLiquidityPool"
      | "uniswapV3FlashCallback"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrowCToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "comet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUniswapLiquidityPoolToken0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [CometMigrator.CollateralStruct[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "sweepee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniswapLiquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3FlashCallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "borrowCToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "comet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUniswapLiquidityPoolToken0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3FlashCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "Migrated(address,tuple[],uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Migrated"): EventFragment;
}

export interface MigratedEventObject {
  user: string;
  collateral: CometMigrator.CollateralStructOutput[];
  repayAmount: BigNumber;
  borrowAmountWithFee: BigNumber;
}
export type MigratedEvent = TypedEvent<
  [string, CometMigrator.CollateralStructOutput[], BigNumber, BigNumber],
  MigratedEventObject
>;

export type MigratedEventFilter = TypedEventFilter<MigratedEvent>;

export interface CometMigrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CometMigratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowCToken(overrides?: CallOverrides): Promise<[string]>;

    borrowToken(overrides?: CallOverrides): Promise<[string]>;

    cETH(overrides?: CallOverrides): Promise<[string]>;

    comet(overrides?: CallOverrides): Promise<[string]>;

    inMigration(overrides?: CallOverrides): Promise<[BigNumber]>;

    isUniswapLiquidityPoolToken0(overrides?: CallOverrides): Promise<[boolean]>;

    migrate(
      collateral: CometMigrator.CollateralStruct[],
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweep(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweepee(overrides?: CallOverrides): Promise<[string]>;

    uniswapLiquidityPool(overrides?: CallOverrides): Promise<[string]>;

    uniswapV3FlashCallback(
      fee0: PromiseOrValue<BigNumberish>,
      fee1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  borrowCToken(overrides?: CallOverrides): Promise<string>;

  borrowToken(overrides?: CallOverrides): Promise<string>;

  cETH(overrides?: CallOverrides): Promise<string>;

  comet(overrides?: CallOverrides): Promise<string>;

  inMigration(overrides?: CallOverrides): Promise<BigNumber>;

  isUniswapLiquidityPoolToken0(overrides?: CallOverrides): Promise<boolean>;

  migrate(
    collateral: CometMigrator.CollateralStruct[],
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweep(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweepee(overrides?: CallOverrides): Promise<string>;

  uniswapLiquidityPool(overrides?: CallOverrides): Promise<string>;

  uniswapV3FlashCallback(
    fee0: PromiseOrValue<BigNumberish>,
    fee1: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    borrowCToken(overrides?: CallOverrides): Promise<string>;

    borrowToken(overrides?: CallOverrides): Promise<string>;

    cETH(overrides?: CallOverrides): Promise<string>;

    comet(overrides?: CallOverrides): Promise<string>;

    inMigration(overrides?: CallOverrides): Promise<BigNumber>;

    isUniswapLiquidityPoolToken0(overrides?: CallOverrides): Promise<boolean>;

    migrate(
      collateral: CometMigrator.CollateralStruct[],
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sweep(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepee(overrides?: CallOverrides): Promise<string>;

    uniswapLiquidityPool(overrides?: CallOverrides): Promise<string>;

    uniswapV3FlashCallback(
      fee0: PromiseOrValue<BigNumberish>,
      fee1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Migrated(address,tuple[],uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      collateral?: null,
      repayAmount?: null,
      borrowAmountWithFee?: null
    ): MigratedEventFilter;
    Migrated(
      user?: PromiseOrValue<string> | null,
      collateral?: null,
      repayAmount?: null,
      borrowAmountWithFee?: null
    ): MigratedEventFilter;
  };

  estimateGas: {
    borrowCToken(overrides?: CallOverrides): Promise<BigNumber>;

    borrowToken(overrides?: CallOverrides): Promise<BigNumber>;

    cETH(overrides?: CallOverrides): Promise<BigNumber>;

    comet(overrides?: CallOverrides): Promise<BigNumber>;

    inMigration(overrides?: CallOverrides): Promise<BigNumber>;

    isUniswapLiquidityPoolToken0(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      collateral: CometMigrator.CollateralStruct[],
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweep(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweepee(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapLiquidityPool(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3FlashCallback(
      fee0: PromiseOrValue<BigNumberish>,
      fee1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowCToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inMigration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUniswapLiquidityPoolToken0(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      collateral: CometMigrator.CollateralStruct[],
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweepee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapLiquidityPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapV3FlashCallback(
      fee0: PromiseOrValue<BigNumberish>,
      fee1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
