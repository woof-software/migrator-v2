/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CometMigratorV3Interface extends utils.Interface {
  functions: {
    "COMET()": FunctionFragment;
    "IS_UNISWAP_LIQUIDITY_POOL_TOKEN_0()": FunctionFragment;
    "SWEEPEE()": FunctionFragment;
    "UNISWAP_LIQUIDITY_POOL()": FunctionFragment;
    "WETH()": FunctionFragment;
    "migrate(uint256)": FunctionFragment;
    "sweep(address)": FunctionFragment;
    "uniswapV3FlashCallback(uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COMET"
      | "IS_UNISWAP_LIQUIDITY_POOL_TOKEN_0"
      | "SWEEPEE"
      | "UNISWAP_LIQUIDITY_POOL"
      | "WETH"
      | "migrate"
      | "sweep"
      | "uniswapV3FlashCallback"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "COMET", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "IS_UNISWAP_LIQUIDITY_POOL_TOKEN_0",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SWEEPEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_LIQUIDITY_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3FlashCallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "COMET", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "IS_UNISWAP_LIQUIDITY_POOL_TOKEN_0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SWEEPEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_LIQUIDITY_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3FlashCallback",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CometMigratorV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CometMigratorV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COMET(overrides?: CallOverrides): Promise<[string]>;

    IS_UNISWAP_LIQUIDITY_POOL_TOKEN_0(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    SWEEPEE(overrides?: CallOverrides): Promise<[string]>;

    UNISWAP_LIQUIDITY_POOL(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    migrate(
      flashAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweep(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3FlashCallback(
      fee0: PromiseOrValue<BigNumberish>,
      fee1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  COMET(overrides?: CallOverrides): Promise<string>;

  IS_UNISWAP_LIQUIDITY_POOL_TOKEN_0(
    overrides?: CallOverrides
  ): Promise<boolean>;

  SWEEPEE(overrides?: CallOverrides): Promise<string>;

  UNISWAP_LIQUIDITY_POOL(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  migrate(
    flashAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweep(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3FlashCallback(
    fee0: PromiseOrValue<BigNumberish>,
    fee1: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COMET(overrides?: CallOverrides): Promise<string>;

    IS_UNISWAP_LIQUIDITY_POOL_TOKEN_0(
      overrides?: CallOverrides
    ): Promise<boolean>;

    SWEEPEE(overrides?: CallOverrides): Promise<string>;

    UNISWAP_LIQUIDITY_POOL(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    migrate(
      flashAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sweep(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3FlashCallback(
      fee0: PromiseOrValue<BigNumberish>,
      fee1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    COMET(overrides?: CallOverrides): Promise<BigNumber>;

    IS_UNISWAP_LIQUIDITY_POOL_TOKEN_0(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SWEEPEE(overrides?: CallOverrides): Promise<BigNumber>;

    UNISWAP_LIQUIDITY_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      flashAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweep(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3FlashCallback(
      fee0: PromiseOrValue<BigNumberish>,
      fee1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COMET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IS_UNISWAP_LIQUIDITY_POOL_TOKEN_0(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SWEEPEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNISWAP_LIQUIDITY_POOL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      flashAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3FlashCallback(
      fee0: PromiseOrValue<BigNumberish>,
      fee1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
